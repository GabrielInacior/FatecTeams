#!/usr/bin/env ts-node

import { MigrationRunner } from '../src/migrations/migration-runner';
import { Logger } from '../src/utils/Logger';

/**
 * Script para executar migrations em produ√ß√£o
 * Deve ser executado antes de iniciar o servidor
 */
async function runProductionMigrations() {
  let runner: MigrationRunner | null = null;
  
  try {
    Logger.info('üöÄ [PRODU√á√ÉO] Iniciando processo de migrations...');
    
    runner = new MigrationRunner();
    
    // Verificar migrations pendentes
    const pendingMigrations = await runner.checkPendingMigrations();
    
    if (pendingMigrations.length === 0) {
      Logger.info('‚úÖ [PRODU√á√ÉO] Nenhuma migration pendente. Sistema atualizado!');
      return;
    }
    
    Logger.info(`üìä [PRODU√á√ÉO] Encontradas ${pendingMigrations.length} migrations pendentes:`);
    pendingMigrations.forEach(migration => {
      Logger.info(`   - ${migration}`);
    });
    
    // Executar migrations
    await runner.runMigrations();
    
    Logger.info('üéâ [PRODU√á√ÉO] Todas as migrations foram aplicadas com sucesso!');
    
  } catch (error) {
    Logger.error('üí• [PRODU√á√ÉO] Erro fatal no processo de migrations:', error);
    
    // Em produ√ß√£o, falhar se migrations n√£o executarem
    process.exit(1);
    
  } finally {
    if (runner) {
      await runner.close();
    }
  }
}

// Verificar se est√° sendo executado diretamente
if (require.main === module) {
  runProductionMigrations()
    .then(() => {
      Logger.info('‚úÖ [PRODU√á√ÉO] Script de migrations conclu√≠do com sucesso');
      process.exit(0);
    })
    .catch((error) => {
      Logger.error('‚ùå [PRODU√á√ÉO] Falha no script de migrations:', error);
      process.exit(1);
    });
}

export { runProductionMigrations };

